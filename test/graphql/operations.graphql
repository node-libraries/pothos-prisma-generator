fragment user on User {
  id
  email
  name
  roles
  createdAt
  updatedAt
}

fragment category on Category {
  id
  name
  createdAt
  updatedAt
}

fragment post on Post {
  id
  published
  title
  content
  authorId
  updatedAt
  publishedAt
}

query CountUser($filter: UserFilter) {
  countUser(filter: $filter)
}

query CountPost($filter: PostFilter) {
  countPost(filter: $filter)
}

query CountCategory($filter: CategoryFilter) {
  countCategory(filter: $filter)
}

query FindUniqueUser(
  $filter: UserUniqueFilter!
  $postFilter: PostFilter
  $postOrderBy: [PostOrderBy!]
  $postLimit: Int
  $postOffset: Int
) {
  findUniqueUser(filter: $filter) {
    ...user
    posts(
      filter: $postFilter
      orderBy: $postOrderBy
      limit: $postLimit
      offset: $postOffset
    ) {
      ...post
    }
    postsCount(filter: $postFilter)
  }
}

query FindUniquePost(
  $filter: PostUniqueFilter!
  $categoryFilter: CategoryFilter
  $categoryOrderBy: [CategoryOrderBy!]
  $categoryLimit: Int
  $categoryOffset: Int
) {
  findUniquePost(filter: $filter) {
    ...post
    author {
      ...user
    }
    categories(
      filter: $categoryFilter
      orderBy: $categoryOrderBy
      limit: $categoryLimit
      offset: $categoryOffset
    ) {
      ...category
    }
    categoriesCount(filter: $categoryFilter)
  }
}

query FindUniqueCategory(
  $filter: CategoryUniqueFilter!
  $postFilter: PostFilter
  $postOrderBy: [PostOrderBy!]
  $postLimit: Int
  $postOffset: Int
) {
  findUniqueCategory(filter: $filter) {
    ...category
    posts(
      filter: $postFilter
      orderBy: $postOrderBy
      limit: $postLimit
      offset: $postOffset
    ) {
      ...post
    }
    postsCount(filter: $postFilter)
  }
}

query FindFirstUser(
  $filter: UserFilter
  $orderBy: [UserOrderBy!]
  $postFilter: PostFilter
  $postOrderBy: [PostOrderBy!]
  $postLimit: Int
  $postOffset: Int
) {
  findFirstUser(filter: $filter, orderBy: $orderBy) {
    ...user
    posts(
      filter: $postFilter
      orderBy: $postOrderBy
      limit: $postLimit
      offset: $postOffset
    ) {
      ...post
    }
    postsCount(filter: $postFilter)
  }
}

query FindFirstPost(
  $filter: PostFilter
  $orderBy: [PostOrderBy!]
  $categoryFilter: CategoryFilter
  $categoryOrderBy: [CategoryOrderBy!]
  $categoryLimit: Int
  $categoryOffset: Int
) {
  findFirstPost(filter: $filter, orderBy: $orderBy) {
    ...post
    author {
      ...user
    }
    categories(
      filter: $categoryFilter
      orderBy: $categoryOrderBy
      limit: $categoryLimit
      offset: $categoryOffset
    ) {
      ...category
    }
    categoriesCount(filter: $categoryFilter)
  }
}

query FindFirstCategory(
  $filter: CategoryFilter
  $orderBy: [CategoryOrderBy!]
  $postFilter: PostFilter
  $postOrderBy: [PostOrderBy!]
  $postLimit: Int
  $postOffset: Int
) {
  findFirstCategory(filter: $filter, orderBy: $orderBy) {
    ...category
    posts(
      filter: $postFilter
      orderBy: $postOrderBy
      limit: $postLimit
      offset: $postOffset
    ) {
      ...post
    }
    postsCount(filter: $postFilter)
  }
}

query FindManyUser(
  $filter: UserFilter
  $orderBy: [UserOrderBy!]
  $limit: Int
  $offset: Int
  $postFilter: PostFilter
  $postOrderBy: [PostOrderBy!]
  $postLimit: Int
  $postOffset: Int
) {
  findManyUser(
    filter: $filter
    orderBy: $orderBy
    limit: $limit
    offset: $offset
  ) {
    ...user
    posts(
      filter: $postFilter
      orderBy: $postOrderBy
      limit: $postLimit
      offset: $postOffset
    ) {
      ...post
    }
    postsCount(filter: $postFilter)
  }
}

query FindManyPost(
  $filter: PostFilter
  $limit: Int
  $offset: Int
  $orderBy: [PostOrderBy!]
  $categoryFilter: CategoryFilter
  $categoryOrderBy: [CategoryOrderBy!]
  $categoryLimit: Int
  $categoryOffset: Int
) {
  findManyPost(
    filter: $filter
    orderBy: $orderBy
    limit: $limit
    offset: $offset
  ) {
    ...post
    author {
      ...user
    }
    categories(
      filter: $categoryFilter
      orderBy: $categoryOrderBy
      limit: $categoryLimit
      offset: $categoryOffset
    ) {
      ...category
    }
    categoriesCount(filter: $categoryFilter)
  }
}

query FindManyCategory(
  $filter: CategoryFilter
  $orderBy: [CategoryOrderBy!]
  $limit: Int
  $offset: Int
  $postFilter: PostFilter
  $postOrderBy: [PostOrderBy!]
  $postLimit: Int
  $postOffset: Int
) {
  findManyCategory(
    filter: $filter
    orderBy: $orderBy
    limit: $limit
    offset: $offset
  ) {
    ...category
    posts(
      filter: $postFilter
      orderBy: $postOrderBy
      limit: $postLimit
      offset: $postOffset
    ) {
      ...post
    }
    postsCount(filter: $postFilter)
  }
}

mutation CreateOneUser($input: UserCreateInput!) {
  createOneUser(input: $input) {
    ...user
  }
}

mutation CreateOnePost($input: PostCreateInput!) {
  createOnePost(input: $input) {
    ...post
  }
}

mutation CreateOneCategory($input: CategoryCreateInput!) {
  createOneCategory(input: $input) {
    ...category
  }
}

mutation CreateManyUser($input: [UserCreateInput!]!) {
  createManyUser(input: $input)
}

mutation CreateManyPost($input: [PostCreateInput!]!) {
  createManyPost(input: $input)
}

mutation CreateManyCategory($input: [CategoryCreateInput!]!) {
  createManyCategory(input: $input)
}

mutation UpdateOneUser($where: UserUniqueFilter!, $data: UserUpdateInput!) {
  updateOneUser(where: $where, data: $data) {
    ...user
  }
}

mutation UpdateOnePost($where: PostUniqueFilter!, $data: PostUpdateInput!) {
  updateOnePost(where: $where, data: $data) {
    ...post
  }
}

mutation UpdateOneCategory(
  $where: CategoryUniqueFilter!
  $data: CategoryUpdateInput!
) {
  updateOneCategory(where: $where, data: $data) {
    ...category
  }
}

mutation UpdateManyUser($where: UserFilter!, $data: UserUpdateInput!) {
  updateManyUser(where: $where, data: $data)
}

mutation UpdateManyPost($where: PostFilter!, $data: PostUpdateInput!) {
  updateManyPost(where: $where, data: $data)
}

mutation UpdateManyCategory(
  $where: CategoryFilter!
  $data: CategoryUpdateInput!
) {
  updateManyCategory(where: $where, data: $data)
}

mutation DeleteOneUser($where: UserUniqueFilter!) {
  deleteOneUser(where: $where) {
    ...user
  }
}

mutation DeleteOnePost($where: PostUniqueFilter!) {
  deleteOnePost(where: $where) {
    ...post
  }
}

mutation DeleteOneCategory($where: CategoryUniqueFilter!) {
  deleteOneCategory(where: $where) {
    ...category
  }
}

mutation DeleteManyUser($where: UserFilter!) {
  deleteManyUser(where: $where)
}

mutation DeleteManyPost($where: PostFilter!) {
  deleteManyPost(where: $where)
}

mutation DeleteManyCategory($where: CategoryFilter!) {
  deleteManyCategory(where: $where)
}
