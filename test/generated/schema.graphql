"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

"""
A field whose value is a hexadecimal: https://en.wikipedia.org/wiki/Hexadecimal.
"""
scalar Decimal

enum Role {
  ADMIN
  USER
}

enum OrderBy {
  Asc
  Desc
}

input PostFilter {
  id: StringFilter
  published: BooleanFilter
  title: StringFilter
  content: StringFilter
  author: UserFilter
  authorId: StringFilter
  categories: CategoryListFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  publishedAt: DateTimeFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  not: StringFilter
  is: String
  isNot: String
  contains: String
  startsWith: String
  endsWith: String
  lt: String
  lte: String
  gt: String
  gte: String
}

input BooleanFilter {
  equals: Boolean
  in: [Boolean!]
  notIn: [Boolean!]
  not: BooleanFilter
  is: Boolean
  isNot: Boolean
}

input UserFilter {
  id: StringFilter
  email: StringFilter
  name: StringFilter
  posts: PostListFilter
  roles: RoleListFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PostListFilter {
  every: PostFilter
  some: PostFilter
  none: PostFilter
}

input RoleListFilter {
  has: Role
  hasSome: [Role!]
  hasEvery: [Role!]
  isEmpty: Boolean
  equals: [Role!]
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  not: DateTimeFilter
  is: DateTime
  isNot: DateTime
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

input CategoryFilter {
  id: StringFilter
  name: StringFilter
  posts: PostListFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CategoryListFilter {
  every: CategoryFilter
  some: CategoryFilter
  none: CategoryFilter
}

input PostOrderBy {
  id: OrderBy
  published: OrderBy
  title: OrderBy
  content: OrderBy
  author: UserOrderBy
  authorId: OrderBy
  categories: CategoryOrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
  publishedAt: OrderBy
}

input UserOrderBy {
  id: OrderBy
  email: OrderBy
  name: OrderBy
  posts: PostOrderBy
  roles: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
}

input CategoryOrderBy {
  id: OrderBy
  name: OrderBy
  posts: PostOrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
}

input TypeTestFilter {
  id: StringFilter
  scalarList: StringListFilter
  role: RoleFilter
}

input StringListFilter {
  has: String
  hasSome: [String!]
  hasEvery: [String!]
  isEmpty: Boolean
  equals: [String!]
}

input RoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: RoleFilter
  is: Role
  isNot: Role
}

input UserUniqueFilter {
  id: String
  email: String
}

input PostUniqueFilter {
  id: String
}

input CategoryUniqueFilter {
  id: String
}

input TypeTestUniqueFilter {
  id: String
}

input TypeTestOrderBy {
  id: OrderBy
  scalarList: OrderBy
  role: OrderBy
}

input UserCreateInput {
  id: String
  email: String!
  name: String
  posts: UserCreatePostsRelationInput
  roles: [Role!]
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreatePostsRelationInput {
  create: [PostCreateInput!]
  connect: [PostUniqueFilter!]
}

input PostCreateInput {
  id: String
  published: Boolean
  title: String
  content: String
  categories: PostCreateCategoriesRelationInput
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

input PostCreateCategoriesRelationInput {
  create: [CategoryCreateInput!]
  connect: [CategoryUniqueFilter!]
}

input CategoryCreateInput {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input TypeTestCreateInput {
  id: String
  scalarList: [String!]
  role: Role!
}

input UserUpdateInput {
  id: String
  email: String
  name: String
  posts: UserUpdatePostsRelationInput
  roles: [Role!]
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpdatePostsRelationInput {
  create: [PostCreateInput!]
  set: [PostUniqueFilter!]
  disconnect: [PostUniqueFilter!]
  delete: [PostUniqueFilter!]
  connect: [PostUniqueFilter!]
  update: [UserUpdatePostsRelationInputUpdate!]
  updateMany: [UserUpdatePostsRelationInputUpdateMany!]
  deleteMany: [PostWithoutAuthorFilter!]
}

input PostUpdateWithoutAuthorInput {
  id: String
  published: Boolean
  title: String
  content: String
  categories: PostUpdateCategoriesRelationInput
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

input PostUpdateCategoriesRelationInput {
  create: [CategoryCreateInput!]
  set: [CategoryUniqueFilter!]
  disconnect: [CategoryUniqueFilter!]
  delete: [CategoryUniqueFilter!]
  connect: [CategoryUniqueFilter!]
  update: [PostUpdateCategoriesRelationInputUpdate!]
  updateMany: [PostUpdateCategoriesRelationInputUpdateMany!]
  deleteMany: [CategoryWithoutPostsFilter!]
}

input CategoryUpdateWithoutPostsInput {
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryWithoutPostsFilter {
  id: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PostUpdateCategoriesRelationInputUpdate {
  where: CategoryUniqueFilter
  data: CategoryUpdateWithoutPostsInput
}

input PostUpdateCategoriesRelationInputUpdateMany {
  where: CategoryWithoutPostsFilter
  data: CategoryUpdateWithoutPostsInput
}

input PostWithoutAuthorFilter {
  id: StringFilter
  published: BooleanFilter
  title: StringFilter
  content: StringFilter
  categories: CategoryListFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  publishedAt: DateTimeFilter
}

input UserUpdatePostsRelationInputUpdate {
  where: PostUniqueFilter
  data: PostUpdateWithoutAuthorInput
}

input UserUpdatePostsRelationInputUpdateMany {
  where: PostWithoutAuthorFilter
  data: PostUpdateWithoutAuthorInput
}

input PostUpdateInput {
  id: String
  published: Boolean
  title: String
  content: String
  author: PostUpdateAuthorRelationInput
  categories: PostUpdateCategoriesRelationInput
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

input PostUpdateAuthorRelationInput {
  create: UserCreateInput
  update: UserUpdateWithoutPostsInput
  connect: UserUniqueFilter
  disconnect: Boolean
  delete: Boolean
}

input UserUpdateWithoutPostsInput {
  id: String
  email: String
  name: String
  roles: [Role!]
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryUpdateInput {
  id: String
  name: String
  posts: CategoryUpdatePostsRelationInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryUpdatePostsRelationInput {
  create: [PostCreateInput!]
  set: [PostUniqueFilter!]
  disconnect: [PostUniqueFilter!]
  delete: [PostUniqueFilter!]
  connect: [PostUniqueFilter!]
  update: [CategoryUpdatePostsRelationInputUpdate!]
  updateMany: [CategoryUpdatePostsRelationInputUpdateMany!]
  deleteMany: [PostWithoutCategoriesFilter!]
}

input PostUpdateWithoutCategoriesInput {
  id: String
  published: Boolean
  title: String
  content: String
  author: PostUpdateAuthorRelationInput
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

input PostWithoutCategoriesFilter {
  id: StringFilter
  published: BooleanFilter
  title: StringFilter
  content: StringFilter
  author: UserFilter
  authorId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  publishedAt: DateTimeFilter
}

input CategoryUpdatePostsRelationInputUpdate {
  where: PostUniqueFilter
  data: PostUpdateWithoutCategoriesInput
}

input CategoryUpdatePostsRelationInputUpdateMany {
  where: PostWithoutCategoriesFilter
  data: PostUpdateWithoutCategoriesInput
}

input TypeTestUpdateInput {
  id: String
  scalarList: [String!]
  role: Role
}

type User {
  id: ID
  email: String!
  name: String!
  posts(filter: PostFilter, orderBy: [PostOrderBy!], limit: Int, offset: Int): [Post!]!
  postsCount(filter: PostFilter): Int!
  roles: [Role!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Post {
  id: ID
  published: Boolean!
  title: String!
  content: String!
  author: User
  authorId: String
  categories(filter: CategoryFilter, orderBy: [CategoryOrderBy!], limit: Int, offset: Int): [Category!]!
  categoriesCount(filter: CategoryFilter): Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime!
}

type Category {
  id: ID
  name: String!
  posts(filter: PostFilter, orderBy: [PostOrderBy!], limit: Int, offset: Int): [Post!]!
  postsCount(filter: PostFilter): Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TypeTest {
  id: ID
  scalarList: [String!]!
  role: Role!
}

type Query {
  countUser(filter: UserFilter): Int
  countPost(filter: PostFilter): Int
  countCategory(filter: CategoryFilter): Int
  countTypeTest(filter: TypeTestFilter): Int
  findUniqueUser(filter: UserUniqueFilter!): User
  findUniquePost(filter: PostUniqueFilter!): Post
  findUniqueCategory(filter: CategoryUniqueFilter!): Category
  findUniqueTypeTest(filter: TypeTestUniqueFilter!): TypeTest
  findFirstUser(filter: UserFilter, orderBy: [UserOrderBy!]): User
  findFirstPost(filter: PostFilter, orderBy: [PostOrderBy!]): Post
  findFirstCategory(filter: CategoryFilter, orderBy: [CategoryOrderBy!]): Category
  findFirstTypeTest(filter: TypeTestFilter, orderBy: [TypeTestOrderBy!]): TypeTest
  findManyUser(filter: UserFilter, orderBy: [UserOrderBy!], limit: Int, offset: Int): [User!]
  findManyPost(filter: PostFilter, orderBy: [PostOrderBy!], limit: Int, offset: Int): [Post!]
  findManyCategory(filter: CategoryFilter, orderBy: [CategoryOrderBy!], limit: Int, offset: Int): [Category!]
  findManyTypeTest(filter: TypeTestFilter, orderBy: [TypeTestOrderBy!], limit: Int, offset: Int): [TypeTest!]
}

type Mutation {
  createOneUser(input: UserCreateInput!): User
  createOnePost(input: PostCreateInput!): Post
  createOneCategory(input: CategoryCreateInput!): Category
  createOneTypeTest(input: TypeTestCreateInput!): TypeTest
  createManyUser(input: [UserCreateInput!]!): Int
  createManyPost(input: [PostCreateInput!]!): Int
  createManyCategory(input: [CategoryCreateInput!]!): Int
  createManyTypeTest(input: [TypeTestCreateInput!]!): Int
  updateOneUser(where: UserUniqueFilter!, data: UserUpdateInput!): User
  updateOnePost(where: PostUniqueFilter!, data: PostUpdateInput!): Post
  updateOneCategory(where: CategoryUniqueFilter!, data: CategoryUpdateInput!): Category
  updateOneTypeTest(where: TypeTestUniqueFilter!, data: TypeTestUpdateInput!): TypeTest
  updateManyUser(where: UserFilter!, data: UserUpdateInput!): Int
  updateManyPost(where: PostFilter!, data: PostUpdateInput!): Int
  updateManyCategory(where: CategoryFilter!, data: CategoryUpdateInput!): Int
  updateManyTypeTest(where: TypeTestFilter!, data: TypeTestUpdateInput!): Int
  deleteOneUser(where: UserUniqueFilter!): User
  deleteOnePost(where: PostUniqueFilter!): Post
  deleteOneCategory(where: CategoryUniqueFilter!): Category
  deleteOneTypeTest(where: TypeTestUniqueFilter!): TypeTest
  deleteManyUser(where: UserFilter!): Int
  deleteManyPost(where: PostFilter!): Int
  deleteManyCategory(where: CategoryFilter!): Int
  deleteManyTypeTest(where: TypeTestFilter!): Int
}